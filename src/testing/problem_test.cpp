
#include "../main.h"
#include "../core/nurikabe.h"

#include <ctime>

char problem1[][12] = {
	".5......2.",
	".....3....",
	".4......2.",
	".........4",
	"2..1......",
	".3..4.2...",
	".......3..",
	"..........",
	"3.........",
	"....1..3..",
};

char problem2[][12] = {
	"6.2.......",
	".........3",
	"..........",
	".....2....",
	"2.2......8",
	"........3.",
	".....2....",
	"........3.",
	"..........",
	".4.5.2....",
};

char problem33[][12] = {
	"...7...2..",
	".....2....",
	"..1.......",
	".1.1....3.",
	".......2..",
	".4.4.....2",
	"..4.......",
	"..........",
	".......4..",
	"..4.....3.",
};

char problem32[][12] = {
	"....5.....",
	".....3....",
	"...2......",
	".....2.6..",
	".3.2......",
	"......1.3.",
	"..3.2.....",
	"......2...",
	"....4.....",
	".....6....",
};

char problem30[][12] = {
	".........7",
	"..........",
	"...1....2.",
	".3........",
	".........1",
	"2.....2...",
	"....2...1.",
	"..........",
	"..........",
	"g.3...3.2.",
};

char problem_my[][12] = {
	".......5..",
	"......6...",
	".......7..",
	"..5.3.....",
	"...4......",
	"......2...",
	"..........",
	"..........",
	"...2......",
	"..5.....4.",
};

char problem_ox[][20] = {
	"..................",
	"1....c.....3.c....",
	".................2",
	"2....3.....3....3.",
	"....1.....1.......",
	"3....1............",
	"...2..2.3.2.......",
	"2...........1.....",
	"..3...............",
	"1..............c.1",
};

char problem_nikoli7[][25] = {
	"....5...................",
	"..........2.6....7.3...4",
	"..1....5........3.5.....",
	".7...6.................1",
	"........4...............",
	"...1......1...5......3..",
	"..2..3..................",
	"........3...3...2..7....",
	"........................",
	"6...1....5...5...1....5.",
	"......6........5.....3..",
	"...4...............4....",
	".5..........1...........",
	"........3.4.....5.......",
};

char problem_nikoli10[][37] = {
	"...........4............2...........",
	"3.4..........2...7.........8......2.",
	"....7......5...1...8.5...1..2..4...2",
	"6....4.......3..........2.2.........",
	"...........6...................4....",
	"....2.............1..2...........2..",
	"........1.......4.....4....4..1.....",
	".1..................3............4.4",
	".....2.....4..4............4........",
	".......5..3...................2.4...",
	".5.1..............1....3...8...2....",
	".....1...2..........................",
	"2............2.5...........4.....2.1",
	".............................2......",
	"1..2...4..7...i...1............1...1",
	".....................2...8.4........",
	"....3...........i.....1..........4..",
	".................4................4.",
	"......3.1...4......4....2....4...4..",
	"6......1..3.................4.......",
};

char problem_giant[][46] = {
	"..7...3...............3...2....5...3...2.....",
	"...2...4......7.6......2.3....2...3...2......",
	".............4...4........................9..",
	".........................................5...",
	"......2..2...5....3.....a....................",
	".......6..4...4..2.....9..........4...a......",
	"..8............................4.7.....3..3..",
	"4..4.2....................4...3............5.",
	".5....3......2...........2...................",
	"............4.........2....................8.",
	"...............2..7....9..........7.......4..",
	"......9.......4....3.3...........2...........",
	".......2..............3........4........3....",
	".........7.................3....9....2...3...",
	".4........4.2........2....5..5........2......",
	"..3..........3..7.....6.......5..........2...",
	"...........2...3....2...........3.......4....",
	"..........3......2...3...........6.........4.",
	"....3...........2...........5.......2..4..2..",
	".4...4..2..................3.......6....3....",
	"6......3.....................................",
	"...........9....2........g...................",
	"............3....4.5......c..................",
	".......4............2........................",
	"......6.......3.........................2...a",
	".4......4....4...............2....3...5..3.2.",
	"4..3...3......................4....6...2.....",
	"..7..........................................",
	"..........4.................4........2.......",
	".......4.6......6...5....7.3...4......5.2....",
	"......2........4...6....3.......4........9..."
};

char problem_100[][25] = {
	"...........3.......6...8",
	".5.....3.......2........",
	"...........2............",
	"..5.2....3.......7......",
	".......4.....2..........",
	".....5.............4....",
	"...3.....6.......3...4..",
	".4....6....8...6........",
	".............3..........",
	"......3............6....",
	".........7..............",
	"...........4....4.......",
	".8......................",
	"........2.........6..7.."
};

char problem_hard[][19] = {
	"..6........6...6.6",
	".6........6.......",
	"..................",
	".......6..........",
	"..6...............",
	"...6..............",
	".....6............",
	".6..............6.",
	".........6........",
	"................6.",
};

char problem_16[][10] = {
	"..1.1...3",
	"2....2...",
	"...a.....",
	".......1.",
	".........",
	"..2......",
	"5.....4..",
	"...1...1.",
	".....2..1",
};

#define problem problem_nikoli10
#define problem_H 20
#define problem_W 36

void problem_test__()
{
	int field_bas[problem_H * problem_W];

	for(int i = 0; i < problem_H; i++)
		for(int j = 0; j < problem_W; j++){
			if(problem[i][j] >= '0' && problem[i][j] <= '9'){
				field_bas[i * problem_W + j] = problem[i][j] - '0';
			}else if(problem[i][j] >= 'a' && problem[i][j] <= 'z'){
				field_bas[i * problem_W + j] = problem[i][j] - 'a' + 10;
			}else field_bas[i * problem_W + j] = -1;
		}

	nk_field f(problem_H, problem_W, field_bas);

	//f.debug(stdout);
	//nk_solver::expand_white(f);

	nk_solver::assumption(f, 1);
	//nk_solver::solve(f);
	
	//f.debug(stdout);

	//puts("");
	//printf("%d\n", f.status());

}

void problem_test()
{
	time_t start = clock();

	for(int i=0;i<100;i++){
		problem_test__();
	}

	printf("%.3f\n", (double)(clock() - start) / CLOCKS_PER_SEC);
}

void expand_white_test()
{
	nk_field f(10, 10);

	f.set_hint(0, 0, 10);
	f.set_hint(2, 1, 5);

	nk_solver::expand_white(f);
	f.debug(stdout);

}
